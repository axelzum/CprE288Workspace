#include "uart.h"

#define BIT0 0x01
#define BIT1 0x02
#define BIT2 0x04
#define BIT3 0x08
#define BIT4 0x10
#define BIT5 0x20
#define BIT6 0x40
#define BIT7 0x80

void uart_init(void) {

    //Turn on clock for UART1 and Port B
    SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R1;
    SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R1;

    //Enable alternate function for PB0, PB1
    GPIO_PORTB_AFSEL_R |= (BIT1 | BIT0);
    GPIO_PORTB_PCTL_R |= (BIT0 | BIT4);

    GPIO_PORTB_DEN_R |= (BIT1 | BIT0); //Set pins0,1 digital mode
    GPIO_PORTB_DIR_R &= ~BIT0; // Set pin 0 (Rx) to input(0)
    GPIO_PORTB_DIR_R |= BIT1;  // Set pin 1 (Tx) to output(1)

    //Disable UART0 device while we set it up
    UART1_CTL_R &= ~UART_CTL_UARTEN;

    // Set desired UART functionality
    UART1_CTL_R = 0b001000000000;

}

//TODO
void init_uart_interrupts(int *button_event_addr, int *button_num_addr) {

    // In order to configure GPIO ports to detect interrupts, you will need to visit pg. 656 in the Tiva datasheet.
    // Notice that you already followed some steps in 10.3 for initialization and configuration of the GPIO ports in the function button_init().
    // Additional steps for setting up the GPIO port to detect interrupts have been outlined below.

    // Mask the bits for pins 0-5
    GPIO_PORTE_IM_R &= 0b11111111111111111111111111000000;

    // Set pins 0-5 to use edge sensing
    GPIO_PORTE_IS_R &= 0b11111111111111111111111111000000;

    // Set pins 0-5 to use both edges. We want to update the LCD
    // when a button is pressed, and when the button is released.
    GPIO_PORTE_IBE_R |= 0b00000000000000000000000000111111;

    // Clear the interrupts
    GPIO_PORTE_ICR_R |= 0b00000000000000000000000000111111;

    // Unmask the bits for pins 0-5
    GPIO_PORTE_IM_R |= 0b00000000000000000000000000111111;

    // Enable GPIO port E interrupt
    NVIC_EN0_R |= 0b00000000000000000000000000010000;

    // Bind the interrupt to the handler.
    IntRegister(INT_GPIOE, UART1_handler);
}

//TODO
void UART1_handler() {

    // Clear interrupt status register
    GPIO_PORTE_ICR_R |= 0b00000000000000000000000000111111;
    button_event = 1;
    button_num = button_getButton();
}

void uart_sendChar(char data) {

}

char uart_receive(void) {

}
