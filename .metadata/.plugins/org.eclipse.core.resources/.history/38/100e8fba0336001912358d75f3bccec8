#include "uart.h"

void uart_init(void) {
    //Enable UART module using RCGCUART
    SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R1;

    //Enable clock via RCGCGPIO (340, Table 23-5 pg1351)


}

//TODO
void init_uart_interrupts(int *button_event_addr, int *button_num_addr) {

    // In order to configure GPIO ports to detect interrupts, you will need to visit pg. 656 in the Tiva datasheet.
    // Notice that you already followed some steps in 10.3 for initialization and configuration of the GPIO ports in the function button_init().
    // Additional steps for setting up the GPIO port to detect interrupts have been outlined below.

    // Mask the bits for pins 0-5
    GPIO_PORTE_IM_R &= 0b11111111111111111111111111000000;

    // Set pins 0-5 to use edge sensing
    GPIO_PORTE_IS_R &= 0b11111111111111111111111111000000;

    // Set pins 0-5 to use both edges. We want to update the LCD
    // when a button is pressed, and when the button is released.
    GPIO_PORTE_IBE_R |= 0b00000000000000000000000000111111;

    // Clear the interrupts
    GPIO_PORTE_ICR_R |= 0b00000000000000000000000000111111;

    // Unmask the bits for pins 0-5
    GPIO_PORTE_IM_R |= 0b00000000000000000000000000111111;

    // Enable GPIO port E interrupt
    NVIC_EN0_R |= 0b00000000000000000000000000010000;

    // Bind the interrupt to the handler.
    IntRegister(INT_GPIOE, UART1_handler);
}

//TODO
void UART1_handler() {

    // Clear interrupt status register
    GPIO_PORTE_ICR_R |= 0b00000000000000000000000000111111;
    button_event = 1;
    button_num = button_getButton();
}

void uart_sendChar(char data) {

}

char uart_receive(void) {

}
